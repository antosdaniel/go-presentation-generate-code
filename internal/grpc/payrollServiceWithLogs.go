// Code generated by gowrap. DO NOT EDIT.
// template: ../../templates/log
// gowrap: http://github.com/hexdigest/gowrap

package grpc

import (
	"context"
	"log"

	"github.com/antosdaniel/go-presentation-generate-code/internal/grpc/payroll/payrollv1"
	"github.com/antosdaniel/go-presentation-generate-code/internal/grpc/payroll/payrollv1/payrollv1connect"
	connect_go "github.com/bufbuild/connect-go"
)

// PayrollServiceHandlerWithLog implements payrollv1connect.PayrollServiceHandler that is instrumented with logging
type PayrollServiceHandlerWithLog struct {
	_base payrollv1connect.PayrollServiceHandler
}

// NewPayrollServiceHandlerWithLog instruments an implementation of the payrollv1connect.PayrollServiceHandler with simple logging
func NewPayrollServiceHandlerWithLog(base payrollv1connect.PayrollServiceHandler) PayrollServiceHandlerWithLog {
	return PayrollServiceHandlerWithLog{_base: base}
}

// AddPayroll implements payrollv1connect.PayrollServiceHandler
func (_d PayrollServiceHandlerWithLog) AddPayroll(ctx context.Context, pp1 *connect_go.Request[payrollv1.AddPayrollRequest]) (pp2 *connect_go.Response[payrollv1.AddPayrollResponse], err error) {
	_params := []interface{}{"PayrollServiceHandlerWithLog: calling AddPayroll with params:", ctx, pp1}
	log.Println(_params...)
	defer func() {
		_results := []interface{}{"PayrollServiceHandlerWithLog: AddPayroll returned results:", pp2, err}
		if err != nil {
			log.Println(_results...)
		} else {
			log.Println(_results...)
		}
	}()
	return _d._base.AddPayroll(ctx, pp1)
}

// AddPayslip implements payrollv1connect.PayrollServiceHandler
func (_d PayrollServiceHandlerWithLog) AddPayslip(ctx context.Context, pp1 *connect_go.Request[payrollv1.AddPayslipRequest]) (pp2 *connect_go.Response[payrollv1.AddPayslipResponse], err error) {
	_params := []interface{}{"PayrollServiceHandlerWithLog: calling AddPayslip with params:", ctx, pp1}
	log.Println(_params...)
	defer func() {
		_results := []interface{}{"PayrollServiceHandlerWithLog: AddPayslip returned results:", pp2, err}
		if err != nil {
			log.Println(_results...)
		} else {
			log.Println(_results...)
		}
	}()
	return _d._base.AddPayslip(ctx, pp1)
}

// GetPayroll implements payrollv1connect.PayrollServiceHandler
func (_d PayrollServiceHandlerWithLog) GetPayroll(ctx context.Context, pp1 *connect_go.Request[payrollv1.GetPayrollRequest]) (pp2 *connect_go.Response[payrollv1.GetPayrollResponse], err error) {
	_params := []interface{}{"PayrollServiceHandlerWithLog: calling GetPayroll with params:", ctx, pp1}
	log.Println(_params...)
	defer func() {
		_results := []interface{}{"PayrollServiceHandlerWithLog: GetPayroll returned results:", pp2, err}
		if err != nil {
			log.Println(_results...)
		} else {
			log.Println(_results...)
		}
	}()
	return _d._base.GetPayroll(ctx, pp1)
}
