// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: payroll/v1/payroll.proto

package payrollv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/antosdaniel/go-presentation-generate-code/internal/grpc/payroll/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PayrollServiceName is the fully-qualified name of the PayrollService service.
	PayrollServiceName = "payroll.v1.PayrollService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PayrollServiceAddPayrollProcedure is the fully-qualified name of the PayrollService's AddPayroll
	// RPC.
	PayrollServiceAddPayrollProcedure = "/payroll.v1.PayrollService/AddPayroll"
	// PayrollServiceAddPayslipProcedure is the fully-qualified name of the PayrollService's AddPayslip
	// RPC.
	PayrollServiceAddPayslipProcedure = "/payroll.v1.PayrollService/AddPayslip"
	// PayrollServiceGetPayrollProcedure is the fully-qualified name of the PayrollService's GetPayroll
	// RPC.
	PayrollServiceGetPayrollProcedure = "/payroll.v1.PayrollService/GetPayroll"
)

// PayrollServiceClient is a client for the payroll.v1.PayrollService service.
type PayrollServiceClient interface {
	AddPayroll(context.Context, *connect_go.Request[v1.AddPayrollRequest]) (*connect_go.Response[v1.AddPayrollResponse], error)
	AddPayslip(context.Context, *connect_go.Request[v1.AddPayslipRequest]) (*connect_go.Response[v1.AddPayslipResponse], error)
	GetPayroll(context.Context, *connect_go.Request[v1.GetPayrollRequest]) (*connect_go.Response[v1.GetPayrollResponse], error)
}

// NewPayrollServiceClient constructs a client for the payroll.v1.PayrollService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPayrollServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PayrollServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &payrollServiceClient{
		addPayroll: connect_go.NewClient[v1.AddPayrollRequest, v1.AddPayrollResponse](
			httpClient,
			baseURL+PayrollServiceAddPayrollProcedure,
			opts...,
		),
		addPayslip: connect_go.NewClient[v1.AddPayslipRequest, v1.AddPayslipResponse](
			httpClient,
			baseURL+PayrollServiceAddPayslipProcedure,
			opts...,
		),
		getPayroll: connect_go.NewClient[v1.GetPayrollRequest, v1.GetPayrollResponse](
			httpClient,
			baseURL+PayrollServiceGetPayrollProcedure,
			opts...,
		),
	}
}

// payrollServiceClient implements PayrollServiceClient.
type payrollServiceClient struct {
	addPayroll *connect_go.Client[v1.AddPayrollRequest, v1.AddPayrollResponse]
	addPayslip *connect_go.Client[v1.AddPayslipRequest, v1.AddPayslipResponse]
	getPayroll *connect_go.Client[v1.GetPayrollRequest, v1.GetPayrollResponse]
}

// AddPayroll calls payroll.v1.PayrollService.AddPayroll.
func (c *payrollServiceClient) AddPayroll(ctx context.Context, req *connect_go.Request[v1.AddPayrollRequest]) (*connect_go.Response[v1.AddPayrollResponse], error) {
	return c.addPayroll.CallUnary(ctx, req)
}

// AddPayslip calls payroll.v1.PayrollService.AddPayslip.
func (c *payrollServiceClient) AddPayslip(ctx context.Context, req *connect_go.Request[v1.AddPayslipRequest]) (*connect_go.Response[v1.AddPayslipResponse], error) {
	return c.addPayslip.CallUnary(ctx, req)
}

// GetPayroll calls payroll.v1.PayrollService.GetPayroll.
func (c *payrollServiceClient) GetPayroll(ctx context.Context, req *connect_go.Request[v1.GetPayrollRequest]) (*connect_go.Response[v1.GetPayrollResponse], error) {
	return c.getPayroll.CallUnary(ctx, req)
}

// PayrollServiceHandler is an implementation of the payroll.v1.PayrollService service.
type PayrollServiceHandler interface {
	AddPayroll(context.Context, *connect_go.Request[v1.AddPayrollRequest]) (*connect_go.Response[v1.AddPayrollResponse], error)
	AddPayslip(context.Context, *connect_go.Request[v1.AddPayslipRequest]) (*connect_go.Response[v1.AddPayslipResponse], error)
	GetPayroll(context.Context, *connect_go.Request[v1.GetPayrollRequest]) (*connect_go.Response[v1.GetPayrollResponse], error)
}

// NewPayrollServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPayrollServiceHandler(svc PayrollServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(PayrollServiceAddPayrollProcedure, connect_go.NewUnaryHandler(
		PayrollServiceAddPayrollProcedure,
		svc.AddPayroll,
		opts...,
	))
	mux.Handle(PayrollServiceAddPayslipProcedure, connect_go.NewUnaryHandler(
		PayrollServiceAddPayslipProcedure,
		svc.AddPayslip,
		opts...,
	))
	mux.Handle(PayrollServiceGetPayrollProcedure, connect_go.NewUnaryHandler(
		PayrollServiceGetPayrollProcedure,
		svc.GetPayroll,
		opts...,
	))
	return "/payroll.v1.PayrollService/", mux
}

// UnimplementedPayrollServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPayrollServiceHandler struct{}

func (UnimplementedPayrollServiceHandler) AddPayroll(context.Context, *connect_go.Request[v1.AddPayrollRequest]) (*connect_go.Response[v1.AddPayrollResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("payroll.v1.PayrollService.AddPayroll is not implemented"))
}

func (UnimplementedPayrollServiceHandler) AddPayslip(context.Context, *connect_go.Request[v1.AddPayslipRequest]) (*connect_go.Response[v1.AddPayslipResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("payroll.v1.PayrollService.AddPayslip is not implemented"))
}

func (UnimplementedPayrollServiceHandler) GetPayroll(context.Context, *connect_go.Request[v1.GetPayrollRequest]) (*connect_go.Response[v1.GetPayrollResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("payroll.v1.PayrollService.GetPayroll is not implemented"))
}
