// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Payslip is an object representing the database table.
type Payslip struct {
	ID        string `boil:"id" json:"id" toml:"id" yaml:"id"`
	TenantID  string `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	PayrollID string `boil:"payroll_id" json:"payroll_id" toml:"payroll_id" yaml:"payroll_id"`
	GrossPay  int    `boil:"gross_pay" json:"gross_pay" toml:"gross_pay" yaml:"gross_pay"`
	Tax       int    `boil:"tax" json:"tax" toml:"tax" yaml:"tax"`
	NetPay    int    `boil:"net_pay" json:"net_pay" toml:"net_pay" yaml:"net_pay"`

	R *payslipR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L payslipL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PayslipColumns = struct {
	ID        string
	TenantID  string
	PayrollID string
	GrossPay  string
	Tax       string
	NetPay    string
}{
	ID:        "id",
	TenantID:  "tenant_id",
	PayrollID: "payroll_id",
	GrossPay:  "gross_pay",
	Tax:       "tax",
	NetPay:    "net_pay",
}

var PayslipTableColumns = struct {
	ID        string
	TenantID  string
	PayrollID string
	GrossPay  string
	Tax       string
	NetPay    string
}{
	ID:        "payslips.id",
	TenantID:  "payslips.tenant_id",
	PayrollID: "payslips.payroll_id",
	GrossPay:  "payslips.gross_pay",
	Tax:       "payslips.tax",
	NetPay:    "payslips.net_pay",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var PayslipWhere = struct {
	ID        whereHelperstring
	TenantID  whereHelperstring
	PayrollID whereHelperstring
	GrossPay  whereHelperint
	Tax       whereHelperint
	NetPay    whereHelperint
}{
	ID:        whereHelperstring{field: "\"payslips\".\"id\""},
	TenantID:  whereHelperstring{field: "\"payslips\".\"tenant_id\""},
	PayrollID: whereHelperstring{field: "\"payslips\".\"payroll_id\""},
	GrossPay:  whereHelperint{field: "\"payslips\".\"gross_pay\""},
	Tax:       whereHelperint{field: "\"payslips\".\"tax\""},
	NetPay:    whereHelperint{field: "\"payslips\".\"net_pay\""},
}

// PayslipRels is where relationship names are stored.
var PayslipRels = struct {
	Payroll string
}{
	Payroll: "Payroll",
}

// payslipR is where relationships are stored.
type payslipR struct {
	Payroll *Payroll `boil:"Payroll" json:"Payroll" toml:"Payroll" yaml:"Payroll"`
}

// NewStruct creates a new relationship struct
func (*payslipR) NewStruct() *payslipR {
	return &payslipR{}
}

func (r *payslipR) GetPayroll() *Payroll {
	if r == nil {
		return nil
	}
	return r.Payroll
}

// payslipL is where Load methods for each relationship are stored.
type payslipL struct{}

var (
	payslipAllColumns            = []string{"id", "tenant_id", "payroll_id", "gross_pay", "tax", "net_pay"}
	payslipColumnsWithoutDefault = []string{"id", "tenant_id", "payroll_id"}
	payslipColumnsWithDefault    = []string{"gross_pay", "tax", "net_pay"}
	payslipPrimaryKeyColumns     = []string{"id"}
	payslipGeneratedColumns      = []string{}
)

type (
	// PayslipSlice is an alias for a slice of pointers to Payslip.
	// This should almost always be used instead of []Payslip.
	PayslipSlice []*Payslip

	payslipQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	payslipType                 = reflect.TypeOf(&Payslip{})
	payslipMapping              = queries.MakeStructMapping(payslipType)
	payslipPrimaryKeyMapping, _ = queries.BindMapping(payslipType, payslipMapping, payslipPrimaryKeyColumns)
	payslipInsertCacheMut       sync.RWMutex
	payslipInsertCache          = make(map[string]insertCache)
	payslipUpdateCacheMut       sync.RWMutex
	payslipUpdateCache          = make(map[string]updateCache)
	payslipUpsertCacheMut       sync.RWMutex
	payslipUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single payslip record from the query.
func (q payslipQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Payslip, error) {
	o := &Payslip{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for payslips")
	}

	return o, nil
}

// All returns all Payslip records from the query.
func (q payslipQuery) All(ctx context.Context, exec boil.ContextExecutor) (PayslipSlice, error) {
	var o []*Payslip

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Payslip slice")
	}

	return o, nil
}

// Count returns the count of all Payslip records in the query.
func (q payslipQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count payslips rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q payslipQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if payslips exists")
	}

	return count > 0, nil
}

// Payroll pointed to by the foreign key.
func (o *Payslip) Payroll(mods ...qm.QueryMod) payrollQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PayrollID),
	}

	queryMods = append(queryMods, mods...)

	return Payrolls(queryMods...)
}

// LoadPayroll allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (payslipL) LoadPayroll(ctx context.Context, e boil.ContextExecutor, singular bool, maybePayslip interface{}, mods queries.Applicator) error {
	var slice []*Payslip
	var object *Payslip

	if singular {
		var ok bool
		object, ok = maybePayslip.(*Payslip)
		if !ok {
			object = new(Payslip)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePayslip)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePayslip))
			}
		}
	} else {
		s, ok := maybePayslip.(*[]*Payslip)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePayslip)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePayslip))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &payslipR{}
		}
		args = append(args, object.PayrollID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &payslipR{}
			}

			for _, a := range args {
				if a == obj.PayrollID {
					continue Outer
				}
			}

			args = append(args, obj.PayrollID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`payrolls`),
		qm.WhereIn(`payrolls.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Payroll")
	}

	var resultSlice []*Payroll
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Payroll")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for payrolls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payrolls")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Payroll = foreign
		if foreign.R == nil {
			foreign.R = &payrollR{}
		}
		foreign.R.Payslips = append(foreign.R.Payslips, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PayrollID == foreign.ID {
				local.R.Payroll = foreign
				if foreign.R == nil {
					foreign.R = &payrollR{}
				}
				foreign.R.Payslips = append(foreign.R.Payslips, local)
				break
			}
		}
	}

	return nil
}

// SetPayroll of the payslip to the related item.
// Sets o.R.Payroll to related.
// Adds o to related.R.Payslips.
func (o *Payslip) SetPayroll(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Payroll) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"payslips\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"payroll_id"}),
		strmangle.WhereClause("\"", "\"", 2, payslipPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PayrollID = related.ID
	if o.R == nil {
		o.R = &payslipR{
			Payroll: related,
		}
	} else {
		o.R.Payroll = related
	}

	if related.R == nil {
		related.R = &payrollR{
			Payslips: PayslipSlice{o},
		}
	} else {
		related.R.Payslips = append(related.R.Payslips, o)
	}

	return nil
}

// Payslips retrieves all the records using an executor.
func Payslips(mods ...qm.QueryMod) payslipQuery {
	mods = append(mods, qm.From("\"payslips\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"payslips\".*"})
	}

	return payslipQuery{q}
}

// FindPayslip retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPayslip(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Payslip, error) {
	payslipObj := &Payslip{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"payslips\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, payslipObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from payslips")
	}

	return payslipObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Payslip) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no payslips provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(payslipColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	payslipInsertCacheMut.RLock()
	cache, cached := payslipInsertCache[key]
	payslipInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			payslipAllColumns,
			payslipColumnsWithDefault,
			payslipColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(payslipType, payslipMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(payslipType, payslipMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"payslips\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"payslips\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into payslips")
	}

	if !cached {
		payslipInsertCacheMut.Lock()
		payslipInsertCache[key] = cache
		payslipInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Payslip.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Payslip) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	payslipUpdateCacheMut.RLock()
	cache, cached := payslipUpdateCache[key]
	payslipUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			payslipAllColumns,
			payslipPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update payslips, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"payslips\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, payslipPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(payslipType, payslipMapping, append(wl, payslipPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update payslips row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for payslips")
	}

	if !cached {
		payslipUpdateCacheMut.Lock()
		payslipUpdateCache[key] = cache
		payslipUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q payslipQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for payslips")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for payslips")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PayslipSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), payslipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"payslips\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, payslipPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in payslip slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all payslip")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Payslip) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no payslips provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(payslipColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	payslipUpsertCacheMut.RLock()
	cache, cached := payslipUpsertCache[key]
	payslipUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			payslipAllColumns,
			payslipColumnsWithDefault,
			payslipColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			payslipAllColumns,
			payslipPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert payslips, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(payslipPrimaryKeyColumns))
			copy(conflict, payslipPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"payslips\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(payslipType, payslipMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(payslipType, payslipMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert payslips")
	}

	if !cached {
		payslipUpsertCacheMut.Lock()
		payslipUpsertCache[key] = cache
		payslipUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Payslip record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Payslip) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Payslip provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), payslipPrimaryKeyMapping)
	sql := "DELETE FROM \"payslips\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from payslips")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for payslips")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q payslipQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no payslipQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from payslips")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for payslips")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PayslipSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), payslipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"payslips\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, payslipPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from payslip slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for payslips")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Payslip) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPayslip(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PayslipSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PayslipSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), payslipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"payslips\".* FROM \"payslips\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, payslipPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PayslipSlice")
	}

	*o = slice

	return nil
}

// PayslipExists checks if the Payslip row exists.
func PayslipExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"payslips\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if payslips exists")
	}

	return exists, nil
}

// Exists checks if the Payslip row exists.
func (o *Payslip) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PayslipExists(ctx, exec, o.ID)
}
